"""
add_labels_to_manifest.py
----------------------------------
Reads an existing DICOM manifest (generated by build_dicom_manifest.py),
reads a separate Excel file containing patient labels, and merges these labels
into the manifest based on a patient ID extracted from the DICOM file path.

Usage:
    python add_labels_to_manifest.py "dicom_manifest.xlsx" "labels.xlsx" "labeled_manifest.xlsx"

Arguments:
    1. Path to the input DICOM manifest Excel file.
    2. Path to the labels Excel file.
    3. Path for the output labeled manifest Excel file.

Example:
    python add_labels_to_manifest.py "dicom_manifest.xlsx" "B-mode-and-CEUS-Liver_ReferenceStandards_v2_20220218.xlsx" "dicom_manifest_with_labels.xlsx"
"""

import pandas as pd
import re
import os
import sys

def add_labels(manifest_path, labels_path, output_path):
    """
    Adds labels from a separate Excel file to the DICOM manifest.

    Args:
        manifest_path (str): Path to the input DICOM manifest Excel file.
        labels_path (str): Path to the labels Excel file.
        output_path (str): Path for the output labeled manifest Excel file.
    """
    if not os.path.exists(manifest_path):
        print(f"[ERROR] Input manifest file not found: '{manifest_path}'")
        sys.exit(1)
    if not os.path.exists(labels_path):
        print(f"[ERROR] Labels file not found: '{labels_path}'")
        sys.exit(1)

    print(f"Reading manifest from: {manifest_path}")
    mf = pd.read_excel(manifest_path)

    # Extract 'LiverUS-##' from the 'full_path' column to use as patient_id for mapping
    # This regex assumes the patient ID format is "LiverUS-digits"
    # Ensure this column exists or is created by build_dicom_manifest.py
    if 'full_path' in mf.columns:
        mf["patient_id_extracted"] = mf["full_path"].str.extract(r"(LiverUS-\d+)", expand=False)
    elif 'patient_id' in mf.columns:
        # If 'patient_id' is already directly available from DICOM, use it
        mf["patient_id_extracted"] = mf["patient_id"]
    else:
        print("[ERROR] Neither 'full_path' nor 'patient_id' column found in manifest. Cannot extract patient IDs for labeling.")
        sys.exit(1)


    print(f"Reading labels from: {labels_path}")
    lbl_raw = pd.read_excel(labels_path)

    # Locate columns case-insensitively for robustness
    col_map = {c.lower().strip(): c for c in lbl_raw.columns}
    # Attempt to find common patient ID column names
    pid_col_candidates = ["anonymized patient id", "patient id", "patientid", "id"]
    pid_col = next((col_map[c] for c in pid_col_candidates if c in col_map), None)

    # Attempt to find common diagnosis/label column names
    diag_col_candidates = ["final diagnosis", "diagnosis", "label", "class"]
    diag_col = next((col_map[c] for c in diag_col_candidates if c in col_map), None)

    if not pid_col or not diag_col:
        print("[ERROR] Could not automatically find 'patient ID' or 'diagnosis' columns in the labels file.")
        print(f"Available columns in labels file: {list(lbl_raw.columns)}")
        print("Please ensure your labels file has clear column headers for patient ID and diagnosis.")
        sys.exit(1)

    print(f"Using '{pid_col}' for patient ID and '{diag_col}' for labels from '{labels_path}'")

    # Create a mapping dictionary from the labels file
    label_dict = dict(
        lbl_raw[[pid_col, diag_col]]
        .rename(columns={pid_col: "pid", diag_col: "label"})
        .values
    )

    # Map labels to the manifest using the extracted patient ID
    mf["Label"] = mf["patient_id_extracted"].map(label_dict)

    missing = mf["Label"].isna().sum()
    print(f"Labels filled for {len(mf) - missing:,}/{len(mf):,} files "
          f"({missing} missing)")

    # Drop the temporary 'patient_id_extracted' column if it was created
    if 'patient_id_extracted' in mf.columns and 'patient_id' not in mf.columns:
        mf = mf.drop(columns=['patient_id_extracted'])

    # Ensure the output directory exists
    output_dir = os.path.dirname(output_path)
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)

    mf.to_excel(output_path, index=False)
    print(f"Written '{output_path}'")

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python add_labels_to_manifest.py <manifest_path> <labels_path> <output_path>")
        sys.exit(1)

    manifest_file = sys.argv[1]
    labels_file = sys.argv[2]
    output_file = sys.argv[3]

    add_labels(manifest_file, labels_file, output_file)
